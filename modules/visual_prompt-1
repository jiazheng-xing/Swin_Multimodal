# Code for "ActionCLIP: ActionCLIP: A New Paradigm for Action Recognition"
# arXiv:
# Mengmeng Wang, Jiazheng Xing, Yong Liu

from numpy import concatenate
import torch
from torch import nn
from collections import OrderedDict
from torch.nn.utils.rnn import pad_packed_sequence, pack_padded_sequence


class LayerNorm(nn.Module):
    def __init__(self, hidden_size, eps=1e-12):
        """Construct a layernorm module in the TF style (epsilon inside the square root).
        """
        super(LayerNorm, self).__init__()
        self.weight = nn.Parameter(torch.ones(hidden_size))
        self.bias = nn.Parameter(torch.zeros(hidden_size))
        self.variance_epsilon = eps

    def forward(self, x):
        u = x.mean(-1, keepdim=True)
        s = (x - u).pow(2).mean(-1, keepdim=True)
        x = (x - u) / torch.sqrt(s + self.variance_epsilon)
        return self.weight * x + self.bias

class QuickGELU(nn.Module):
    def forward(self, x: torch.Tensor):
        return x * torch.sigmoid(1.702 * x)


class ResidualAttentionBlock(nn.Module):
    def __init__(self, d_model: int, n_head: int, attn_mask: torch.Tensor = None):
        super().__init__()

        self.attn = nn.MultiheadAttention(d_model, n_head)
        self.ln_1 = LayerNorm(d_model)
        self.mlp = nn.Sequential(OrderedDict([
            ("c_fc", nn.Linear(d_model, d_model * 4)),
            ("gelu", QuickGELU()),
            ("c_proj", nn.Linear(d_model * 4, d_model))
        ]))
        self.ln_2 = LayerNorm(d_model)
        self.attn_mask = attn_mask

    def attention(self, x: torch.Tensor):
        self.attn_mask = self.attn_mask.to(dtype=x.dtype, device=x.device) if self.attn_mask is not None else None
        return self.attn(x, x, x, need_weights=False, attn_mask=self.attn_mask)[0]

    def forward(self, x: torch.Tensor):
        x = x + self.attention(self.ln_1(x))
        x = x + self.mlp(self.ln_2(x))
        return x


def trunc_normal_(x, mean=0., std=1.):
    # From https://discuss.pytorch.org/t/implementing-truncated-normal-initializer/4778/12
    return x.normal_().fmod_(2).mul_(std).add_(mean)


class TAggregate(nn.Module):
    def __init__(self, vocab_size, clip_length=None, embed_dim=2048, n_layers=6):
        super(TAggregate, self).__init__()
        self.clip_length = clip_length
        drop_rate = 0.
        enc_layer = nn.TransformerEncoderLayer(d_model=embed_dim, nhead=8)
        self.transformer_enc = nn.TransformerEncoder(enc_layer, num_layers=n_layers, norm=nn.LayerNorm(
            embed_dim))

#-----------------------------------------------image------------------------------------------------------------------
        self.cls_token = nn.Parameter(torch.zeros(1, 1, embed_dim))
        self.pos_embed = nn.Parameter(torch.zeros(1, clip_length + 1, embed_dim))
        self.type_embedding = nn.Parameter(torch.zeros(1, clip_length + 1, embed_dim))
        self.pos_drop = nn.Dropout(p=drop_rate)
#----------------------------------------------text----------------------------------------------------------------------------
        # self.pos_tx_embed= nn.Parameter(torch.zeros(1,77,embed_dim))
        # self.type_tx_embedding = nn.Parameter(torch.ones(1, 77, embed_dim))
        self.pos_tx_embed= nn.Parameter(torch.zeros(1,77,embed_dim))
        self.type_tx_embedding = nn.Parameter(torch.ones(1, 77, embed_dim))
        self.text_cls_token = nn.Parameter(torch.zeros(1, 1, embed_dim))
        with torch.no_grad():
            trunc_normal_(self.pos_embed, std=.02)
            trunc_normal_(self.pos_tx_embed, std=.02)
            trunc_normal_(self.text_cls_token, std=.02)
            trunc_normal_(self.cls_token, std=.02)
        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            with torch.no_grad():
                trunc_normal_(m.weight, std=.02)
        if isinstance(m, nn.Linear) and m.bias is not None:
            nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)

    def forward(self, co_embeds):
        x, t_x, text = co_embeds[0], co_embeds[1], co_embeds[2]
        nvids = x.shape[0]
        # t_x = t_x.unsqueeze(1) # 1_tk
        cls_tokens = self.cls_token.expand(nvids, -1, -1)
        # text_cls_tokens = self.text_cls_token.expand(nvids, -1, -1)
        # print("img—type-token:{}".format(self.type_embedding))
        # print("img-pos-embedding:{}".format(self.pos_embed))
        # print("text-pos-embedding:{}".format(self.pos_tx_embed))
        x = torch.cat((cls_tokens, x), dim=1)
        # t_x = torch.cat((text_cls_tokens, t_x), dim = 1)
        x = x + self.pos_embed + self.type_embedding
        # print("text—type-token:{}".format(self.type_tx_embedding))
        t_x = t_x + self.type_tx_embedding + self.pos_tx_embed  #(batch_size, vocab_size, dimention)
        co_x = torch.cat((x, t_x), dim=1)

        co_x.transpose_(1,0)

        o_co_x = self.transformer_enc(co_x)
        # o_x = self.transformer_enc(x)
        # t_x.transpose_(1,0)
        # o_tx = self.transformer_enc(t_x)
        o_x = o_co_x[0:self.clip_length+1,:,:]
        o_tx = o_co_x[self.clip_length+1:,:,:]
        # co_embeds = torch.cat([t_x, x], dim=1)
        # x = co_embeds

        # x.transpose_(1, 0)
        # o = self.transformer_enc(x)

        # x.transpose_(1,0)
        # o_text = o[torch.arange(x.shape[0]), text.argmax(dim=-1)] 
        # x.transpose_(1,0)
        # o_img = o[t_x.shape[1]].squeeze(1)
        # o_text = o[0].squeeze(1)

        o_img = o_x[0]
        # o_text= o_tx[0]  # 1_tk
        # import pdb
        # pdb.set_trace()
        # t_x.transpose_(1,0)
        o_tx.transpose_(1,0)
        # o_text = o_tx.mean(dim=1)

        o_text = o_tx[torch.arange(t_x.shape[0]), text.argmax(dim=-1)]
        return o_text, o_img


class TemporalTransformer(nn.Module):
    def __init__(self, width: int, layers: int, heads: int, attn_mask: torch.Tensor = None):
        super().__init__()
        self.width = width
        self.layers = layers
        self.resblocks = nn.Sequential(*[ResidualAttentionBlock(width, heads, attn_mask) for _ in range(layers)])

    def forward(self, x: torch.Tensor):
        return self.resblocks((x))

class visual_prompt(nn.Module):
    def __init__(self, sim_head, clip_state_dict, T):
        super().__init__()
        self.sim_header = sim_head
        self.T = T
        assert sim_head in ["meanP", "LSTM", "Transf", "Conv_1D", "Transf_cls", "Transf_att"]

        if self.sim_header == "LSTM" or self.sim_header == "Transf_att" or self.sim_header == "Transf" or self.sim_header == "Transf_cls" or self.sim_header == "Conv_1D" :
            embed_dim = clip_state_dict["text_projection"].shape[1]

            context_length = clip_state_dict["positional_embedding"].shape[0]
            vocab_size = clip_state_dict["token_embedding.weight"].shape[0]
            transformer_width = clip_state_dict["ln_final.weight"].shape[0]
            transformer_heads = transformer_width // 64

            transformer_layers = len(set(k.split(".")[2] for k in clip_state_dict if k.startswith(f"transformer.resblocks")))
            self.token_type_embeddings = nn.Embedding(2,embed_dim)  #add
            self.frame_position_embeddings = nn.Embedding(context_length, embed_dim)

        if self.sim_header == "Transf" or self.sim_header == "Transf_att":
            self.transformer = TemporalTransformer(width=embed_dim, layers=6, heads=transformer_heads)
            print('layer=6')
        if self.sim_header == "LSTM":
            self.lstm_visual = nn.LSTM(input_size=embed_dim, hidden_size=embed_dim,
                                       batch_first=True, bidirectional=False, num_layers=1)

        self.apply(self.init_weights)

        if self.sim_header == "Transf_cls":
            self.transformer = TAggregate( vocab_size= vocab_size, clip_length=self.T, embed_dim=embed_dim, n_layers=2)

        if self.sim_header == 'Conv_1D' :
            self.shift = nn.Conv1d(embed_dim, embed_dim, 3, padding=1, groups=embed_dim, bias=False)
            weight = torch.zeros(embed_dim, 1, 3)
            weight[:embed_dim // 4, 0, 0] = 1.0
            weight[embed_dim // 4:embed_dim // 4 + embed_dim // 2, 0, 1] = 1.0
            weight[-embed_dim // 4:, 0, 2] = 1.0
            self.shift.weight = nn.Parameter(weight)

    def init_weights(self, module):
        """ Initialize the weights.
        """
        if isinstance(module, (nn.Linear, nn.Embedding)):
            # Slightly different from the TF version which uses truncated_normal for initialization
            # cf https://github.com/pytorch/pytorch/pull/5617
            module.weight.data.normal_(mean=0.0, std=0.02)
        elif isinstance(module, LayerNorm):
            if 'beta' in dir(module) and 'gamma' in dir(module):
                module.beta.data.zero_()
                module.gamma.data.fill_(1.0)
            else:
                module.bias.data.zero_()
                module.weight.data.fill_(1.0)
        if isinstance(module, nn.Linear) and module.bias is not None:
            module.bias.data.zero_()

    def forward(self, x, t_x, text):
        b, t, c = x.size()
        x = x.contiguous()
        t_x = t_x.contiguous()
        text = text.contiguous()
        if self.sim_header == "meanP":
            pass
        elif self.sim_header == 'Conv_1D':
            x_original = x
            x = x.view(-1, c, t)
            x = self.shift(x.float())
            x = x.permute(0, 2, 1)
            x = x.type(x_original.dtype) + x_original
        
        elif self.sim_header == "Transf_att":
            x_original = x #(48,8, dimention(512))
            seq_length = t #t-frames 
            position_ids = torch.arange(seq_length, dtype=torch.long, device=x.device) #tensor([0, 1, 2, 3, 4, 5, 6, 7])
            position_ids = position_ids.unsqueeze(0).expand(x.size(0), -1) #(batch_size, T)
            frame_position_embeddings = self.frame_position_embeddings(position_ids)#(48,8,512)
            x = x + frame_position_embeddings
            x = x.permute(1, 0, 2)  # NLD -> LND 8,48,512
            x = self.transformer(x) #8,48,512
            x = x.permute(1, 0, 2)  # LND -> NLD 48,8,512
            x = x.type(x_original.dtype) + x_original #(48,8,512)
            o_x = x
            o_tx = t_x[torch.arange(t_x.shape[0]), text.argmax(dim=-1)]
            # print("---------------------------------Transf_att---------------------------------------------")

        elif self.sim_header == "Transf":
          #--------------------------------------------image----------------------------------------------------------------  
            x_original = x #(batch_size, dimention(512))
            seq_length = t #t-frames 
            position_ids = torch.arange(seq_length, dtype=torch.long, device=x.device) #tensor([0, 1, 2, 3, 4, 5, 6, 7])
            position_ids = position_ids.unsqueeze(0).expand(x.size(0), -1) #(batch_size, T)
            frame_position_embeddings = self.frame_position_embeddings(position_ids)#(48,8,512)
            x = x + frame_position_embeddings
            token_type_img_ids =  torch.full_like(position_ids,1,device=x.device)
            frame_type_embeddings =  self.token_type_embeddings(token_type_img_ids)
            x = x + frame_type_embeddings
        #--------------------------------------------------txt----------------------------------------------------------------
            t_x_original = t_x #(b,N,d)
            token_type_txt_ids = torch.zeros(t_x.shape[0],t_x.shape[1],dtype=torch.long, device=t_x.device)
            text_type_embeddings = self.token_type_embeddings(token_type_txt_ids)
            position_text_ids = torch.arange(t_x.shape[1], dtype=torch.long, device=x.device)
            text_position_embeddings = self. frame_position_embeddings(position_text_ids)
            t_x = t_x + text_type_embeddings + text_position_embeddings

            co_embeds =  torch.cat([t_x, x], dim=1)
            x =co_embeds
            x = x.permute(1, 0, 2)  # NLD -> LND 9,48,512
            x = self.transformer(x) #9,48,512
            x = x.permute(1, 0, 2)  # LND -> NLD 48,9,512

            o_tx = x[:,0:77,:]
            o_x = x[:,77:,:]
            o_x = o_x.type(x_original.dtype) + x_original #(48,8,512)
            # import pdb
            # pdb.set_trace()
            o_tx =  o_tx[torch.arange(x_original.shape[0]), text.argmax(dim=-1)].type(t_x_original.dtype) + t_x_original[torch.arange(x_original.shape[0]), text.argmax(dim=-1)]


        elif self.sim_header == "LSTM":
            x_original = x
            x, _ = self.lstm_visual(x.float())
            self.lstm_visual.flatten_parameters()
            x = torch.cat((x, x_original[:, x.size(1):, ...].contiguous()), dim=1)
            x = x.type(x_original.dtype) + x_original
        elif self.sim_header == "Transf_cls":
            x_original = x
            t_x_original = t_x
            img_x, text_x =  self.transformer(co_embeds)
            return img_x.type(x_original.dtype), text_x.type(t_x_original.dtype)

        else:
            raise ValueError('Unknown optimizer: {}'.format(self.sim_header))
        # import pdb
        # pdb.set_trace()
        return o_x.mean(dim=1, keepdim=False), o_tx  #48,512